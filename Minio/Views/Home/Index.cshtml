@using Minio.Services
@{
    ViewData["Title"] = "MinIO Upload";
}
@model List<MinioFileInfo>

<div class="container mt-5">
    <form id="uploadForm" enctype="multipart/form-data">
        <div class="mb-3">
            <label for="fileInput" class="form-label">Pilih File:</label>
            <input class="form-control" type="file" id="fileInput" required>
        </div>
        <button type="submit" class="btn btn-primary">Upload ke MinIO</button>
        <button type="button" class="btn btn-secondary" id="refreshButton">Refresh</button>
    </form>

    <div class="upload-status mt-4" style="display: none;">
        <div class="progress" style="height: 25px;">
            <div id="progressBar" class="progress-bar progress-bar-striped"
                 role="progressbar" style="width: 0%">
                0%
            </div>
        </div>
        <div id="statusMessage" class="mt-2 text-muted"></div>
    </div>

<br />

    <table class="table table-bordered table-striped" id="fileTable">
    <thead>
        <tr>
            <th>Nama File</th>
            <th>Tanggal Modifikasi</th>
            <th>Ukuran (Bytes)</th>
            <th>Action</th>
        </tr>
    </thead>
        <tbody>
            @if (Model != null && Model.Any())
            {
                foreach (var file in Model)
                {
                    <tr>
                        <td>@file.FileName</td>
                        <td>@file.LastModified.ToString("yyyy-MM-dd HH:mm:ss")</td>
                        <td>@file.Size</td>
                        <td>
                            <button class="download-btn btn btn-primary" data-filename="@file.FileName">
                                Download
                            </button>
                            <button class="delete-btn btn btn-danger" data-filename="@file.FileName">
                                Delete
                            </button>
                        </td>
                    </tr>
                }
            }
            else
            {
                <tr>
                    <td colspan="4" class="text-center">Tidak ada file ditemukan.</td>
                </tr>
            }
        </tbody>
</table>

</div>

@section Scripts {
    <script src="https://cdnjs.cloudflare.com/ajax/libs/microsoft-signalr/5.0.11/signalr.min.js"></script>
    <script>
        document.getElementById("refreshButton").addEventListener("click", function() {
            location.reload();
        });

        document.addEventListener('DOMContentLoaded', () => {
            reattachDownloadEvents();
        });

        // ✅ Fungsi untuk memasang ulang event listener download & delete
        function reattachDownloadEvents() {
            document.querySelectorAll('.download-btn').forEach(btn => {
                btn.addEventListener('click', async () => {
                    const fileName = btn.dataset.filename;
                        console.log('try to download');
              
                            window.location.href ="/Home/DownloadFile?fileName=088048aa-335c-4616-8b95-4333261496ba-vs2015.ent_enu.iso";

                    @* try {

                      
                        const response = await fetch(`/Home/DownloadFile?fileName=${encodeURIComponent(fileName)}`, {
                            method: 'GET'
                        });

                        if (!response.ok) {
                            throw new Error(`Gagal mengunduh file: ${response.statusText}`);
                        }
                        else {
                            console.log('berhasil download');
                        }

                        const blob = await response.blob();
                        const url = window.URL.createObjectURL(blob);

                        const a = document.createElement('a');
                        a.href = url;
                        a.download = fileName;
                        document.body.appendChild(a);
                        a.click();

                        window.URL.revokeObjectURL(url);
                        document.body.removeChild(a); 
                    } catch (error) {
                        console.error("Error:", error);
                        alert("Terjadi kesalahan saat mengunduh file.");
                    }*@
                });
            });

            document.querySelectorAll('.delete-btn').forEach(btn => {
                btn.addEventListener('click', async () => {
                    const fileName = btn.dataset.filename;

                    if (!confirm(`Apakah Anda yakin ingin menghapus ${fileName}?`)) return;

                    try {
                        const response = await fetch(`/Home/DeleteFile?fileName=${encodeURIComponent(fileName)}`, {
                            method: 'DELETE'
                        });

                        if (!response.ok) {
                            throw new Error(`Gagal menghapus file: ${response.statusText}`);
                        }

                        refreshTable();
                    } catch (error) {
                        console.error("Error:", error);
                        alert("Terjadi kesalahan saat menghapus file.");
                    }
                });
            });
        }

        // ✅ Fungsi untuk merefresh tabel setelah update
        function refreshTable() {
            fetch('/Home/Index')
                .then(response => response.text())
                .then(html => {
                    const parser = new DOMParser();
                    const doc = parser.parseFromString(html, 'text/html');
                    const newTableBody = doc.querySelector('#fileTable tbody');

                    document.querySelector('#fileTable tbody').innerHTML = newTableBody.innerHTML;
                    reattachDownloadEvents();
                })
                .catch(error => console.error("Error saat merefresh tabel:", error));
        }

        // ✅ SignalR Connection
        const connection = new signalR.HubConnectionBuilder()
            .withUrl("/uploadHub")
            .withAutomaticReconnect()
            .build();

        connection.start().catch(err => console.error(err));

        // ✅ Event Listener untuk Upload Form
        document.getElementById('uploadForm').addEventListener('submit', async (e) => {
            e.preventDefault();

            const fileInput = document.getElementById('fileInput');
            const file = fileInput.files[0];

            if (!file) {
                alert('Pilih file terlebih dahulu!');
                return;
            }

            const formData = new FormData();
            formData.append('file', file);

            const progressBar = document.getElementById('progressBar');
            const statusMessage = document.getElementById('statusMessage');
            const uploadStatus = document.querySelector('.upload-status');

            uploadStatus.style.display = 'block';
            progressBar.style.width = '0%';
            progressBar.textContent = '0%';
            statusMessage.textContent = 'Mengunggah...';

            let uploadId = null;

            try {
                const startResponse = await fetch('/Home/StartUpload');
                if (!startResponse.ok) throw new Error('Gagal mendapatkan uploadId');

                const startResult = await startResponse.json();
                uploadId = startResult.uploadId;

                // ✅ Kirim file dengan tracking progress
                const xhr = new XMLHttpRequest();
                xhr.open("POST", `/Home/Upload?uploadId=${uploadId}`, true);

                xhr.upload.onprogress = function (event) {
                    if (event.lengthComputable) {
                        let progress = Math.round((event.loaded / event.total) * 100);
                        progressBar.style.width = `${progress}%`;
                        progressBar.textContent = `${progress}%`;
                        statusMessage.textContent = `Mengunggah... (${progress}%)`;
                    }
                };

                xhr.onload = function () {
                    if (xhr.status === 200) {
                        statusMessage.textContent = "Upload Selesai!";
                        setTimeout(() => location.reload(), 2000);
                    } else {
                        statusMessage.textContent = "Gagal mengunggah file.";
                        progressBar.style.backgroundColor = 'red';
                    }
                };

                xhr.onerror = function () {
                    statusMessage.textContent = "Kesalahan saat mengunggah.";
                    progressBar.style.backgroundColor = 'red';
                };

                xhr.send(formData);
            } catch (error) {
                progressBar.style.backgroundColor = 'red';
                statusMessage.textContent = `Error: ${error.message}`;
                console.error(`Error: ${error.message}`);
            }
        });

        connection.on("ReceiveUploadProgress", (uploadId, progress) => {
            console.log(`Progress: ${progress}%`);
            const progressBar = document.getElementById('progressBar');
            const statusMessage = document.getElementById('statusMessage');

            progressBar.style.width = `${progress}%`;
            progressBar.textContent = `${progress}%`;
            statusMessage.textContent = `Mengunggah... (${progress}%)`;

            if (progress >= 100) {
                statusMessage.textContent = "Upload Selesai!";
                setTimeout(() => location.reload(), 2000);
            }
        });
    </script>
}